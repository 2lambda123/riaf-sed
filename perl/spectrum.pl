#!/usr/bin/perl -w
#
# Passes many arguments to the ADAF fortran codes sent by Feng Yuan.
# You need first to compile these codes (of course).

# For computing derivatives. Download the required library from 
# http://search.cpan.org/~jarw/Math-Derivative-0.01/Derivative.pm
# and follow the readme instructions to install it.
use Math::Derivative qw(Derivative1 Derivative2); 

# Needed so that I can plot with Gnuplot
use FileHandle; # see http://perl.plover.com/FAQs/Buffering.html

# Module needed to benchmark the execution time of the code
use Benchmark; # see http://perldoc.perl.org/Benchmark.html
$bench0 = new Benchmark;

# Module needed for copying files without using an external program
use File::Copy;

# Gets values of parameters from external parameter file
&readParam;

# Gets the number of lines of data in the output file from the dynamics
# code.
$i=0;
open (LINES, "x.dat") || 
	die "Can't open output from dynamics!";
while (<LINES>) { $i++; }
close LINES;
$nlines=$i;

# Generates spectra without Comptonization and calculates the range
# of frequencies of the synchrotron peak
&withoutCompt;

# Generates spectrum with comptonization enabled and the using the 
# appropriate range of synchrotron frequencies
&withCompt;

# For benchmarking the execution time
$bench1 = new Benchmark;
$dbench = timediff($bench1, $bench0);
print "\nThe code took: ", timestr($dbench),"\n";

# Useful user information
$lognui=log(convDbl($nui))/log(10.);
$lognuf=log(convDbl($nuf))/log(10.);
print "\nRange of frequencies of comptonization (log10): \nfrom $lognui to $lognuf \n";

# The code dumps two copies of the SED, one at spectrum.dat and other with
# the filename specified by the user at the parameter file. In addition, 
# it creates two copies of the SED without comptonization, one at ses5.dat
# and other at <filename>_ (filename is specified by the user).
if ($outfile !~ /spectrum.dat/) {
    copy("spectrum.dat", $outfile) or 
	die "Additional spectrum file cannot be copied. \n";
    copy("ses5.dat",$outfile . "_");
    print "\nCreated files: spectrum.dat, ses5.dat, $outfile, ${outfile}_ \n";
} else {
    print "\nCreated files: spectrum.dat, ses5.dat \n";
}














# Function that converts from the double numeric format (1.d0) to real (1.e0)
sub convDbl {
   $temp=$_[0];
   $temp =~ s/d/e/;
   return $temp;
}










# Subroutine that reads a file containing the model parameters. Gets the
# values of the parameters from this file.
sub readParam {

# Parameter file
$input="in.dat";

open (PARFILE, $input) || 
	die "Can't open $input !";

# The field separator is "=". It is important that the input values in the
# parameter file are in the strict format "var=value" (no quotes).
while (<PARFILE>) {
  if ($_ !~ /#/  && $_ ne " ") {
      @fields=split /=/, $_;
      chomp @fields;

      if ($fields[0] =~ /^distance$/) {$distance=$fields[1];}
      if ($fields[0] =~ /^m$/) {$m=$fields[1];}
      if ($fields[0] =~ /^beta$/) {$beta=$fields[1];}
      if ($fields[0] =~ /^alfa$/) {$alfa=$fields[1];}
#      if ($fields[0] =~ /^y1$/) {$y1=$fields[1];}
      if ($fields[0] =~ /^dotm0$/) {$dotm0=$fields[1];}
      if ($fields[0] =~ /^rout$/) {$rout=$fields[1];}
#      if ($fields[0] =~ /^y2$/) {$y2=$fields[1];}
#      if ($fields[0] =~ /^qbreset$/) {$qbreset=$fields[1];}
#      if ($fields[0] =~ /^compton$/) {$compton=$fields[1];}
#      if ($fields[0] =~ /^nlines$/) {$nlines=$fields[1];}
      if ($fields[0] =~ /^spec$/) {$outfile=$fields[1];}
  }  
}

close PARFILE;
}






# Generates spectra without Comptonization and calculates the range
# of frequencies of the synchrotron peak
sub withoutCompt {

# Opens pipe to ADAF spectrum code
open(SPEC,"|~/work/projects/finished/liners/adafcode/fortran/spectrum_new");

# Runs first without Comptonization!
print SPEC "$beta \n";
print SPEC "$m \n";
print SPEC "$distance \n";
print SPEC "$alfa \n";
print SPEC "$dotm0 \n";
print SPEC "$rout \n";
print SPEC "1d10 \n"; # print any value, does not matter
print SPEC "1d14 \n"; # any value
print SPEC "0 \n"; # qbreset, not read from file anymore
print SPEC "1 \n"; # disable comptonization
print SPEC "$nlines \n";

close(SPEC);

# Now gets the frequency range of the synchrotron peak, which will set
# the range of seed photons for the comptonization in the next run of
# the spectrum code.
open (SPEC01, "ses5.dat") || 
	die "Can't open the spectrum generated by the first run!";
	
# Resets all arrays
@x=( ); # log10 of frequency
@y=( ); # log10 of nu*Lnu
@dydx=( );
@d2ydx2=( );

$i=0;
while (<SPEC01>) {
    if ($_ =~ /NAN/) { 
	print "NaN in the spectrum: be careful! \n"; 
    } else {
	$x[$i]=substr $_, 3, 12; #16; # 1st column - nu
	$y[$i]=substr $_, 18, 12; #17; # 2nd column - nu*Lnu
	$i++;
    }
}
  
close(SPEC01);

# Computes the first and second derivatives. Before that, checks if 
# the arrays are empty. 
if ($#x!=-1) {
    @dydx=Derivative1(\@x,\@y);
    @d2ydx2=Derivative2(\@x,\@y);
}

# Tests to locate the range of frequencies of the synchrotron peak 
$i=0; # counter
foreach (@x) {
    if ($i==0){ $nui=10.**$_; } # initial nu

    if ($d2ydx2[$i]>10.) {
	$nuf=10.**$_; # final nu
	last;
    }
    $i++;
}

# Such that the fortran code understand that these numbers have double
# precision
$nui=$nui . "d0";
$nuf=$nuf . "d0";
}










# Second run of the calculation of the SED. This time enables comptonization
# of synchrotron photons using the appropriate range of frequencies 
# calculated from the first run.
sub withCompt {
# Opens pipe to ADAF dynamics code
    open(SPEC,"|~/work/projects/finished/liners/adafcode/fortran/spectrum_new");

# 2nd run with Comptonization enabled
    print SPEC "$beta \n";
    print SPEC "$m \n";
    print SPEC "$distance \n";
    print SPEC "$alfa \n";
    print SPEC "$dotm0 \n";
    print SPEC "$rout \n";
    print SPEC "$nui \n";
    print SPEC "$nuf \n";
    print SPEC "0 \n";
    print SPEC "0 \n"; # enables comptonization
    print SPEC "$nlines \n";

    close(SPEC);
}
